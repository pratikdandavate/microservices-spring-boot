version: '3.7'

services: 
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"

  zipkin:
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
  
  docker-mysql:
    image: mysql:latest
    container_name: docker-mysql
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=microservices
      - MYSQL_PASSWORD=root

  discovery-service:
  # container_name: discovery-service
    build:  ./discovery-service
    # hostname: discovery-service
    ports:
      - "8761:8761"

  config-server:
    # container_name: config-server
    build:  ./config-server
    links:
      - "discovery-service"
      - "rabbitmq"
    # mem_limit: 512M
    ports:
     - 8888:8888


  auth-server:
    container_name: auth-server
    build: ./AuthServer
    # network_mode: "host"
    depends_on:
      - docker-mysql
    ports:
      - 9191:9191
    environment:
      - DATABASE_HOST=docker-mysql
      - DATABASE_USER=root
      - DATABASE_PASSWORD=root
      - DATABASE_NAME=oauthDB  
      - DATABASE_PORT=3306
    networks:
      - backend  

  organ-service:
      container_name: organ-service
      build: ./organ-service
      # network_mode: "host"
    # image: ./organ-service
    # container_name: organ-service
      links:
      - "discovery-service"
      - "config-server"
      # - "hystrix-dashboard"
      - "rabbitmq"
      - "zipkin"  
      depends_on:
      - docker-mysql
      - discovery-service
      - config-server
      networks:
      - backend  

  slide-service:
      container_name: slide-service
      build: ./slide-service
      # image: ./slide-service
      # container_name: slide-service
      links:
        - "discovery-service"
        - "config-server"
        # - "hystrix-dashboard"
        - "rabbitmq"
        - "zipkin"  
      depends_on:
        - docker-mysql
        - discovery-service
        - config-server
      networks:
      - backend  

# Networks to be created to facilitate communication between containers
networks:
  backend:
  # frontend:  