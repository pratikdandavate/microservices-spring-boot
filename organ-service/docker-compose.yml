
version: '3'

services: 
  docker-mysql:
    image: mysql:latest
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=microservices
      - MYSQL_PASSWORD=root
  organ-service:
    image: organ-service:latest
    network_mode: "host"
    depends_on:
      - docker-mysql
    # ports:
    #   - 8081:8080
    environment:
      - DATABASE_HOST=docker-mysql
      - DATABASE_USER=root
      - DATABASE_PASSWORD=root
      - DATABASE_NAME=microservices  
      - DATABASE_PORT=3306        
# Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)

# version: '3.7'

# # Define services
# services:
#   # App backend service
#   app-server:
#     # Configuration for building the docker image for the backend service
#     build:
#       context: / # Use an image built from the specified dockerfile in the `polling-app-server` directory.
#       dockerfile: Dockerfile
#     ports:
#       - "8081:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
#     restart: always
#     depends_on: 
#       - db # This service depends on mysql. Start that first.
#     environment: # Pass environment variables to the service
#       SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/microservices?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
#       SPRING_DATASOURCE_USERNAME: root
#       SPRING_DATASOURCE_PASSWORD: root     
#     networks: # Networks to join (Services on the same network can communicate with each other using their name)
#       - backend
#       - frontend

#   # Frontend Service 
#   # app-client:
#   #   build:
#   #     context: polling-app-client # Use an image built from the specified dockerfile in the `polling-app-client` directory.
#   #     dockerfile: Dockerfile
#   #     args:
#   #       REACT_APP_API_BASE_URL: http://127.0.0.1:8080/api
#   #   ports:
#   #     - "9090:80" # Map the exposed port 80 on the container to port 9090 on the host machine
#   #   restart: always
#   #   depends_on:
#   #     - app-server
#   #   networks:
#   #     - frontend  

#   # Database Service (Mysql)
#   db:
#     image: mysql:latest
#     ports:
#       - "3306:3306"
#     restart: always
#     environment:
#       MYSQL_DATABASE: microservices
#       MYSQL_USER: root
#       MYSQL_PASSWORD: root
#       MYSQL_ROOT_PASSWORD: root
#     volumes:
#       - db-data:/var/lib/mysql
#     networks:
#       - backend  
  
# # Volumes
# volumes:
#   db-data:

# # Networks to be created to facilitate communication between containers
# networks:
#   backend:
#   frontend:    